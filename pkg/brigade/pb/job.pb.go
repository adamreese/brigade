// Code generated by protoc-gen-go.
// source: job.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// JobStatus is a label for the condition of a Job at the current time.
type JobStatus int32

const (
	// Unknown means that for some reason the state of the job could not be obtained, typically due
	// to an error in communicating with the host of the job.
	JobStatus_UNKNOWN JobStatus = 0
	// Pending means the job has been accepted by the system, but one or more of the containers
	// has not been started. This includes time before being bound to a node, as well as time spent
	// pulling images onto the host.
	JobStatus_PENDING JobStatus = 1
	// Running means the job has been bound to a node and all of the containers have been started.
	// At least one container is still running or is in the process of being restarted.
	JobStatus_RUNNING JobStatus = 2
	// Succeeded means that all containers in the job have voluntarily terminated
	// with a container exit code of 0, and the system is not going to restart any of these containers.
	JobStatus_SUCCEEDED JobStatus = 3
	// Failed means that all containers in the job have terminated, and at least one container has
	// terminated in a failure (exited with a non-zero exit code or was stopped by the system).
	JobStatus_FAILED JobStatus = 4
)

var JobStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "PENDING",
	2: "RUNNING",
	3: "SUCCEEDED",
	4: "FAILED",
}
var JobStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"PENDING":   1,
	"RUNNING":   2,
	"SUCCEEDED": 3,
	"FAILED":    4,
}

func (x JobStatus) String() string {
	return proto.EnumName(JobStatus_name, int32(x))
}
func (JobStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Job struct {
	// ID is the name for the pod running this job
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name is the name for the job
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Image is the execution environment running the job
	Image string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	// CreationTime is a timestamp representing the server time when this object was
	// created. It is not guaranteed to be set in happens-before order across separate operations.
	CreationTime *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// StartTime is the time the job started.
	StartTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// EndTime is the time the job completed. This may not be present
	// if the job has not completed.
	EndTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// ExitCode is the exit code of the job. This may not be present
	// if the job has not completed.
	ExitCode int32 `protobuf:"varint,7,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	// Status is a textual representation of the job's running status
	Status JobStatus `protobuf:"varint,8,opt,name=status,enum=pb.JobStatus" json:"status,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Job) GetCreationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Job) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Job) GetEndTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func init() {
	proto.RegisterType((*Job)(nil), "pb.Job")
	proto.RegisterEnum("pb.JobStatus", JobStatus_name, JobStatus_value)
}

func init() { proto.RegisterFile("job.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x6d, 0xb7, 0x75, 0xeb, 0x9b, 0x1b, 0x25, 0x78, 0x28, 0xf3, 0x52, 0x04, 0xa1, 0x78,
	0x48, 0x61, 0xe2, 0x41, 0x3c, 0x88, 0xac, 0x55, 0x36, 0x35, 0x4a, 0xe7, 0xf0, 0x38, 0x92, 0x35,
	0xd6, 0xc8, 0xda, 0x94, 0x35, 0x03, 0xfd, 0x62, 0x7e, 0x3e, 0x49, 0xea, 0xf4, 0xb8, 0xdb, 0xfb,
	0xff, 0x5e, 0x7e, 0x2f, 0x7f, 0x70, 0x3f, 0x24, 0xc3, 0xd5, 0x46, 0x2a, 0x89, 0xec, 0x8a, 0x8d,
	0xae, 0x72, 0xa1, 0xde, 0xb7, 0x0c, 0xaf, 0x64, 0x11, 0xe5, 0x72, 0x4d, 0xcb, 0x3c, 0x32, 0x4b,
	0xb6, 0x7d, 0x8b, 0x2a, 0xf5, 0x55, 0xf1, 0x3a, 0x52, 0xa2, 0xe0, 0xb5, 0xa2, 0x45, 0xf5, 0x3f,
	0x35, 0x07, 0x4e, 0xbe, 0x6d, 0x68, 0xcd, 0x24, 0x43, 0x43, 0xb0, 0x45, 0xe6, 0x5b, 0x81, 0x15,
	0xba, 0xa9, 0x2d, 0x32, 0x84, 0xa0, 0x5d, 0xd2, 0x82, 0xfb, 0xb6, 0x21, 0x66, 0x46, 0x47, 0xd0,
	0x11, 0x05, 0xcd, 0xb9, 0xdf, 0x32, 0xb0, 0x09, 0xe8, 0x1a, 0x06, 0xab, 0x0d, 0xa7, 0x4a, 0xc8,
	0x72, 0xa9, 0xaf, 0xfb, 0xed, 0xc0, 0x0a, 0xfb, 0xe3, 0x11, 0xce, 0xa5, 0xcc, 0xd7, 0x1c, 0xef,
	0xba, 0xe0, 0x97, 0xdd, 0xd7, 0xe9, 0xe1, 0x4e, 0xd0, 0x08, 0x5d, 0x02, 0xd4, 0x8a, 0x6e, 0x54,
	0x63, 0x77, 0xf6, 0xda, 0xae, 0x79, 0x6d, 0xd4, 0x0b, 0xe8, 0xf1, 0x32, 0x6b, 0x44, 0x67, 0xaf,
	0xd8, 0xe5, 0x65, 0x66, 0xb4, 0x63, 0x70, 0xf9, 0xa7, 0x50, 0xcb, 0x95, 0xcc, 0xb8, 0xdf, 0x0d,
	0xac, 0xb0, 0x93, 0xf6, 0x34, 0x98, 0xc8, 0x8c, 0xa3, 0x53, 0x70, 0x6a, 0x45, 0xd5, 0xb6, 0xf6,
	0x7b, 0x81, 0x15, 0x0e, 0xc7, 0x03, 0x5c, 0x31, 0x3c, 0x93, 0x6c, 0x6e, 0x60, 0xfa, 0xbb, 0x3c,
	0x7b, 0x04, 0xf7, 0x0f, 0xa2, 0x3e, 0x74, 0x17, 0xe4, 0x9e, 0x3c, 0xbd, 0x12, 0xef, 0x40, 0x87,
	0xe7, 0x84, 0xc4, 0x53, 0x72, 0xe7, 0x59, 0x3a, 0xa4, 0x0b, 0x42, 0x74, 0xb0, 0xd1, 0x00, 0xdc,
	0xf9, 0x62, 0x32, 0x49, 0x92, 0x38, 0x89, 0xbd, 0x16, 0x02, 0x70, 0x6e, 0x6f, 0xa6, 0x0f, 0x49,
	0xec, 0xb5, 0x99, 0x63, 0xfa, 0x9e, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x35, 0xcb, 0x34,
	0xdc, 0x01, 0x00, 0x00,
}
